generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EMPLOYEE
  CUSTOMER
}

model User {
  id        String    @id @unique @default(uuid())
  name      String
  email     String    @unique
  password  String?
  role      UserRole
  isActive  Boolean   @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  session Session?

  @@map("users")
}

model Session {
  id           String   @id @unique @default(uuid())
  userId       String   @unique @map("user_id")
  sessionToken String   @map("session_token")
  expiresAt    DateTime @map("expires_at")
  registerAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id          String    @id @unique @default(uuid())
  name        String    @unique
  price       Float
  description String
  available   Boolean
  imageUrl    String?   @map("image_url")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  attachment   Attachment?
  productsTags ProductTag[]

  @@map("products")
}

model Tag {
  id      String @id @unique @default(uuid())
  tagName String @unique @map("tag_name")

  productsTags ProductTag[]

  @@map("tags")
}

model ProductTag {
  tagId     String @map("tag_id")
  productId String @map("product_id")

  tag     Tag     @relation(fields: [tagId], references: [id], onUpdate: Cascade)
  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([tagId, productId])
  @@map("products_tags")
}

model Attachment {
  id        String  @id @unique @default(uuid())
  fileName  String  @unique @map("file_name")
  url       String
  productId String? @unique @map("product_id")

  product Product? @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("attachments")
}
